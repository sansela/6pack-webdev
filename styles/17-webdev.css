body {
    background-color: rgb(36, 29, 29);
    display: grid;
    /* grid-template-columns: 100px 200px 100px ; */
    /* grid-template-rows: 100px 200px 300px; */

    /*grid-template-columns: 40% 30% 30%;The drawback when used with grid-gap or gap the width overflows. use frames to overcome*/
    /* grid-template-columns: 4fr 3fr 3fr; width will be divide in 4:3:3 ratio*/
    /* grid-template-columns: 200px 2fr 3fr; first grid takes 200px next two grids gets divided by 2:3 ratio*/
    /* grid-template-columns: 100px 2fr 3fr; */

    /* grid-template-columns: repeat(3, 100px);  3 columsn of 100px each*/
    /* grid-template-columns: repeat(3, 1fr); 3 equal sized columns*/

    /* grid-template-columns: repeat(auto-fill, 100px); 100px sized blocks will be filled until the end of the scree*/
    /* grid-template-columns: repeat(auto-fill, 500px);  only 2 blocks for the row because the current screen size can only accommodate 2*/
    /* grid-template-columns: repeat(auto-fill, 30%); only 3 blocs will be accommodated on desktops and mobile screens*/
    /* grid-template-columns: repeat(auto-fill, 50vw); It accomodates only 1 because it considers grid-gap also. The drawback is same number of blocks irrespective of screen size. Below is the solution */
    /* grid-template-columns: repeat(auto-fill, minmax(500px, 1fr)); The minimum width is 500px for each block. The remaining space will be utilized based on the  based on the screen width*/

     /*grid-template-columns: 100px minmax(500px, 1fr); number of colums(2) won't change. One with 100px another min 500px and remaining space will be used 500px to end of the screen width.  */
     /*grid-template-rows: 100px 200px; First two rows height is 100px 200px respectively*/
     /*grid-auto-rows: 300px; All rows height is 300px if not specifically defined like above*/
     /* grid-auto-rows: auto; row height will be changed according to the content otherwise the extra content is hidden */

     /* After 4 equal sized grids the remaining grids will be added to the column. The default was row 
     grid-template-columns: repeat(4, 1fr); This is explicit declaration
     grid-auto-flow: column;
     grid-auto-columns: 100px; Implicit*/
     grid-template-rows: 80px;
     grid-template-columns: repeat(4, 1fr);
     grid-auto-rows: 100px;     
    /* grid-gap: 10px; */
}
.box {
    /* width: 100px; */
    /* height: 100px; */
    background-color: blueviolet;
    color: white;
    /* border: 2px solid crimson; */
    font-family: cursive;
    font-size: large;
}
#heading {
    grid-column-start: 1;
    grid-column-end: 5;
    height: 80px;
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    background-color: crimson;
}
#heading a {
    text-decoration: none;
    color: white;
}
#section1 {
    grid-column-start:1;
    grid-column-end:4;
    grid-row-start: 2;
    grid-row-end: 5;
    background-color: gray;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
}
.tiny {
    width: 100px;
    height: 100px;
    background-color: olive;
    border: 2px solid orange;
}
.tiny2{
    align-self: flex-end;
}
.tiny2, .tiny4{
    justify-self: center;
}
#section2 {
    grid-row-start: 2;
    grid-row-end: 5;
    background-color: white;
}